{"ast":null,"code":"var _jsxFileName = \"/home/neetu/todoBhum/manageTodo/src/components/addList.js\";\nimport React, { PureComponent } from 'react';\nimport './addList.css';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Checkbox from 'react-simple-checkbox';\nimport Select from \"react-select\";\nimport * as actionsTodo from '../actions/actionsTodo';\nvar counter = 0;\n\nclass AddList extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      counter += 1;\n      var userId = parseInt(this.props.todoApp.userId, 10);\n      console.log(counter, userId);\n      this.props.setTaskList(counter, userId);\n      this.props.setCheckboxValue(\"addFlag\", false);\n    };\n\n    this.handleInputValues = e => {\n      this.props.setFieldsValue(e.target.name, e.target.value);\n    };\n\n    this.getDate = () => {\n      var today = new Date().toJSON().split('T')[0];\n      this.setState({\n        today: today\n      });\n    };\n\n    this.handleEditList = () => {\n      this.props.setEditedList();\n    };\n\n    this.handleEditTask = (e, todo, i) => {\n      console.log(\"I want to be edited\");\n      this.props.editTask(todo, i);\n    };\n\n    this.updateCheckbox = (e, id) => {\n      console.log(e.target.name, e.target.checked, id);\n      this.props.updateCheckboxValue(e.target.name, e.target.checked, id);\n    };\n\n    this.handleDeleteTask = (e, todo) => {\n      console.log(e.target.value, todo);\n      this.props.deleteTask(todo);\n    };\n\n    this.showInputBar = (e, todo) => {\n      console.log(e.target.value, todo);\n      document.getElementById('title_' + todo.userId).style.display = 'none';\n      document.getElementById('update_' + todo.userId).style.display = 'inline-block';\n    };\n\n    this.handleCheckbox = e => {\n      this.props.setCheckboxValue(e.target.name, e.target.checked); // this.setState({[e.target.name]:e.target.checked})\n    };\n\n    this.state = {\n      today: null // taskStatus:false\n\n    };\n    this.handleCheckbox = this.handleCheckbox.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return null;\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      if (this.props.todoApp.dueDate === undefined) {\n        this.getDate();\n      }\n    }, 1000);\n    fetch(' https://my-json-server.typicode.com/bhoomika27/todoData/users').then(response => response.json()).then(json => {\n      this.props.setUserData(json);\n      console.log(json);\n    });\n    fetch(' https://my-json-server.typicode.com/bhoomika27/todoData/todos').then(response => response.json()).then(json => {\n      this.props.setUserTodos(json);\n      console.log(json);\n      counter = json.length;\n    });\n  }\n\n  addItem() {\n    this.props.setCheckboxValue(\"addFlag\", true);\n  }\n\n  render() {\n    const usersData = this.props.todoApp.data;\n    return React.createElement(\"div\", {\n      id: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"userDropdownDiv\",\n      className: \"userDropdownDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      id: \"todoHeading\",\n      className: \"todoHeading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"User Todos List!!\"), React.createElement(\"div\", {\n      className: \"statusDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      id: \"status\",\n      name: \"userId\",\n      value: this.props.todoApp.userId,\n      className: \"dropdownSelect\",\n      onChange: this.handleInputValues,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"default\",\n      disabled: true,\n      selected: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Select User\"), Object.values(this.props.todoApp.data).map((user, i) => {\n      return React.createElement(\"option\", {\n        key: i,\n        value: user.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, user.name);\n    }))), this.props.todoApp.edit ? React.createElement(\"button\", {\n      className: \"addBtn\",\n      onClick: this.handleEditList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"SAVE CHANGES\") : ''), this.props.todoApp.todos && this.props.todoApp.userId && React.createElement(\"div\", {\n      className: \"todoContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"todoBtnDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"todosListBtn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Todos\"), React.createElement(\"label\", {\n      className: \"historyTodoBtn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"History\"), React.createElement(\"label\", {\n      className: \"addTodoBtn\",\n      onClick: () => this.addItem(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Add Todos\")), this.props.todoApp.addFlag && React.createElement(\"div\", {\n      className: \"addTodosDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      name: \"taskStatus\",\n      className: \"userTodosCheckBox\",\n      onChange: this.handleCheckbox,\n      checked: this.props.todoApp.taskStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"addItemInput\",\n      name: \"title\",\n      onChange: this.handleInputValues,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: \"./images/cancel.svg\",\n      alt: \"Not Found\",\n      className: \"deleteBtn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"updateTodoLbl\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Add\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, Object.values(this.props.todoApp.todos).map((user, i) => {\n      console.log(this.props.todoApp.userId);\n\n      if (this.props.todoApp.userId == user.userId) {\n        // console.log(user)\n        let classNameUser = `userTodosDiv_${user.userId}`;\n        let title = `title_${user.userId}`;\n        let inputUpdate = `update_${user.userId}`;\n        return React.createElement(\"div\", {\n          className: classNameUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          className: \"dib\",\n          type: \"checkbox\",\n          name: \"taskStatus\",\n          className: \"userTodosCheckBox\",\n          onChange: e => this.updateCheckbox(e, user.id),\n          checked: user.completed,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          id: title,\n          className: \"dib\",\n          onClick: e => this.showInputBar(e, user),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, user.title, \" \"), React.createElement(\"input\", {\n          id: inputUpdate,\n          className: \"dn dib\",\n          placeholder: \"Update value\",\n          className: inputUpdate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }), React.createElement(\"img\", {\n          src: \"./images/cancel.svg\",\n          alt: \"Not Found\",\n          className: \"deleteBtn\",\n          onClick: e => this.handleDeleteTask(e, user),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }), React.createElement(\"label\", {\n          className: \"updateTodoLbl\",\n          onClick: e => this.handleUpdateTask(e, user),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, \"Update\"));\n      }\n    }))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    setFieldsValue: actionsTodo.setFieldsValue,\n    setCheckboxValue: actionsTodo.setCheckboxValue,\n    setUserData: actionsTodo.setUserData,\n    setUserTodos: actionsTodo.setUserTodos,\n    setTaskList: actionsTodo.setTaskList,\n    setEditedList: actionsTodo.setEditedList,\n    deleteTask: actionsTodo.deleteTask,\n    updateCheckboxValue: actionsTodo.updateCheckboxValue\n  }, dispatch);\n};\n\nconst mapStateToProps = state => {\n  return {\n    todoApp: state.todoApp\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddList);\n/*todo : check input is not blank*/\n\n/*todo : check user dropdown  is not blank*/\n// let title = document.getElementById(\"addItem\").value;\n// console.log(title)\n//     let value = this.state.selectedOption.value;\n//     fetch('https://my-json-server.typicode.com/bhoomika27/todoData/todos', {\n//     method: 'POST',\n//     body: JSON.stringify({\n//       title: title,\n//       userId: value\n//     }),\n//     headers: {\n//       \"Content-type\": \"application/json; charset=UTF-8\"\n//     }\n//   })\n//   .then(response => response.json())\n//   .then(json => {console.log(json);\n//   \tdocument.getElementById(\"addItem\").value = '';})","map":{"version":3,"sources":["/home/neetu/todoBhum/manageTodo/src/components/addList.js"],"names":["React","PureComponent","bindActionCreators","connect","Checkbox","Select","actionsTodo","counter","AddList","constructor","props","handleSubmit","e","preventDefault","userId","parseInt","todoApp","console","log","setTaskList","setCheckboxValue","handleInputValues","setFieldsValue","target","name","value","getDate","today","Date","toJSON","split","setState","handleEditList","setEditedList","handleEditTask","todo","i","editTask","updateCheckbox","id","checked","updateCheckboxValue","handleDeleteTask","deleteTask","showInputBar","document","getElementById","style","display","handleCheckbox","state","bind","getDerivedStateFromProps","componentDidMount","interval","setInterval","dueDate","undefined","fetch","then","response","json","setUserData","setUserTodos","length","addItem","render","usersData","data","Object","values","map","user","edit","todos","addFlag","taskStatus","classNameUser","title","inputUpdate","completed","handleUpdateTask","mapDispatchToProps","dispatch","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\r\nimport './addList.css';\r\nimport {bindActionCreators} from 'redux';\r\nimport {connect} from 'react-redux';\r\nimport Checkbox from 'react-simple-checkbox';\r\nimport Select from \"react-select\";\r\nimport * as actionsTodo from '../actions/actionsTodo'\r\n\r\n\r\nvar counter=0;\r\nclass AddList extends PureComponent {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            today:null,\r\n            // taskStatus:false\r\n\r\n        }\r\n        this.handleCheckbox=this.handleCheckbox.bind(this);\r\n    }\r\n    static getDerivedStateFromProps(props, state){\r\n       \r\n        return null;\r\n      \r\n        \r\n    }\r\n    componentDidMount(){\r\n       \r\n        this.interval = setInterval(() => {\r\n        if(this.props.todoApp.dueDate===undefined){this.getDate();}\r\n     }, 1000);\r\n\r\n        fetch(' https://my-json-server.typicode.com/bhoomika27/todoData/users')\r\n                .then(response => response.json())\r\n                .then(json => {this.props.setUserData(json);\r\n                console.log(json)})\r\n        fetch(' https://my-json-server.typicode.com/bhoomika27/todoData/todos')\r\n                .then(response => response.json())\r\n                .then(json => {this.props.setUserTodos(json);\r\n                    console.log(json)\r\n                counter = json.length})\r\n\r\n    }\r\n\r\n    addItem(){\r\n            \r\n        this.props.setCheckboxValue(\"addFlag\",true)\r\n    }\r\n\r\n\r\n     handleSubmit =(e)=>{\r\n        e.preventDefault();      \r\n        counter+=1;\r\n        var userId=parseInt(this.props.todoApp.userId,10);\r\n        console.log(counter ,userId)\r\n        this.props.setTaskList(counter,userId );\r\n        this.props.setCheckboxValue(\"addFlag\",false);\r\n    }\r\n\r\n    handleInputValues =(e)=>{\r\n        this.props.setFieldsValue(e.target.name,e.target.value)        \r\n    }\r\n \r\n\r\n    getDate=()=>{\r\n        var today= new Date().toJSON().split('T')[0];\r\n        this.setState({today:today})\r\n    }\r\n    handleEditList=()=>{\r\n        this.props.setEditedList();\r\n    }\r\n    handleEditTask=(e,todo,i)=>{\r\n        console.log(\"I want to be edited\")\r\n        this.props.editTask(todo,i);\r\n \r\n     }\r\n    updateCheckbox=(e,id)=>{\r\n        console.log(e.target.name ,e.target.checked ,id)\r\n        this.props.updateCheckboxValue(e.target.name ,e.target.checked ,id)\r\n    }\r\n    handleDeleteTask=(e,todo)=>{\r\n        console.log(e.target.value ,todo)\r\n        this.props.deleteTask(todo);\r\n        }\r\n    showInputBar=(e,todo)=>{\r\n        console.log(e.target.value ,todo)       \r\n        document.getElementById('title_'+ todo.userId).style.display = 'none';\r\n        document.getElementById('update_'+ todo.userId).style.display = 'inline-block'\r\n     }\r\n\r\n    handleCheckbox =(e)=>{\r\n        this.props.setCheckboxValue(e.target.name,e.target.checked) \r\n        // this.setState({[e.target.name]:e.target.checked})\r\n    }\r\n    render() {\r\n        const usersData = this.props.todoApp.data;\r\n        return (\r\n            <div id=\"container\">\r\n                <div id=\"userDropdownDiv\" className=\"userDropdownDiv\">\r\n                <h1 id=\"todoHeading\" className=\"todoHeading\">User Todos List!!</h1>\r\n                <div className=\"statusDiv\">\r\n                <select id=\"status\" name=\"userId\" value={this.props.todoApp.userId} className=\"dropdownSelect\" onChange={this.handleInputValues}>\r\n                    <option value=\"default\" disabled selected>Select User</option>\r\n                    {Object.values(this.props.todoApp.data).map((user ,i)=>{\r\n                    return <option key={i} value={user.id}>{user.name}</option>\r\n                    })}\r\n                </select>\r\n                </div>\r\n           \r\n                {this.props.todoApp.edit? <button className=\"addBtn\" onClick={this.handleEditList}>SAVE CHANGES</button>:''}\r\n                </div>\r\n     \r\n                { this.props.todoApp.todos && this.props.todoApp.userId &&\r\n                <div className=\"todoContainer\">\r\n                    <div className=\"todoBtnDiv\">\r\n                        <label className=\"todosListBtn\">Todos</label>\r\n                        <label className=\"historyTodoBtn\">History</label>\r\n                        <label className=\"addTodoBtn\" onClick={() => this.addItem()}>Add Todos</label>\r\n                    </div>\r\n                        {this.props.todoApp.addFlag &&\r\n                        <div className=\"addTodosDiv\">\r\n                        <input type=\"checkbox\" name=\"taskStatus\" className=\"userTodosCheckBox\" onChange={this.handleCheckbox} checked={this.props.todoApp.taskStatus}></input>\r\n                        <input className=\"addItemInput\" name=\"title\" onChange={this.handleInputValues}></input>\r\n                        <img src=\"./images/cancel.svg\" alt=\"Not Found\" className=\"deleteBtn\"/>\r\n                        <label className=\"updateTodoLbl\" onClick={this.handleSubmit}>Add</label>\r\n                        </div>}\r\n               \r\n                        <div>\r\n                    {/* { this.props.todoApp.todos &&  */}\r\n                        { Object.values(this.props.todoApp.todos).map((user,i)=>{\r\n                            console.log(this.props.todoApp.userId)\r\n                            if(this.props.todoApp.userId==user.userId){\r\n                                // console.log(user)\r\n                                let classNameUser = `userTodosDiv_${user.userId}`;\r\n                                let title = `title_${user.userId}`;                               \r\n                                let inputUpdate = `update_${user.userId}`;\r\n                                return (<div className={classNameUser}>\r\n                                            <input className='dib' type=\"checkbox\" name=\"taskStatus\" className=\"userTodosCheckBox\" onChange={(e)=>this.updateCheckbox(e,user.id)} checked={user.completed} />\r\n                                            {/* <input type=\"text\" name=\"\" key={user.userId} value={user.title} onChange={(e)=>handleEditTask(e,e.target.value ,item.key)}/> */}\r\n                                            <p id= {title} className='dib'  onClick={(e)=>this.showInputBar(e,user)} >{user.title} </p>\r\n                                            <input id={inputUpdate}  className='dn dib' placeholder='Update value' className={inputUpdate}/>\r\n                                            <img src=\"./images/cancel.svg\" alt=\"Not Found\"  className=\"deleteBtn\"  onClick={(e)=>this.handleDeleteTask(e,user)} />\r\n                                            <label className=\"updateTodoLbl\" onClick={(e)=>this.handleUpdateTask(e,user)}>Update</label>\r\n                                            </div>)\r\n                                        }\r\n                                    })\r\n                        }\r\n                        </div>\r\n             \r\n                </div>\r\n    }\r\n               \r\n            </div>\r\n\r\n        )}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        setFieldsValue:actionsTodo.setFieldsValue,\r\n        setCheckboxValue:actionsTodo.setCheckboxValue,\r\n        setUserData:actionsTodo.setUserData,\r\n        setUserTodos:actionsTodo.setUserTodos,\r\n        setTaskList:actionsTodo.setTaskList,\r\n        setEditedList:actionsTodo.setEditedList,\r\n        deleteTask:actionsTodo.deleteTask,\r\n        updateCheckboxValue:actionsTodo.updateCheckboxValue\r\n    },dispatch)\r\n};\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todoApp: state.todoApp\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(AddList);\r\n\r\n\t/*todo : check input is not blank*/\r\n        /*todo : check user dropdown  is not blank*/\r\n       \r\n        // let title = document.getElementById(\"addItem\").value;\r\n        // console.log(title)\r\n\t\t//     let value = this.state.selectedOption.value;\r\n\t\t   \r\n\t\t//     fetch('https://my-json-server.typicode.com/bhoomika27/todoData/todos', {\r\n\t\t//     method: 'POST',\r\n\t\t//     body: JSON.stringify({\r\n\t\t//       title: title,\r\n\t\t//       userId: value\r\n\t\t//     }),\r\n\t\t//     headers: {\r\n\t\t//       \"Content-type\": \"application/json; charset=UTF-8\"\r\n\t\t//     }\r\n\t\t//   })\r\n\t\t//   .then(response => response.json())\r\n\t\t//   .then(json => {console.log(json);\r\n\t\t//   \tdocument.getElementById(\"addItem\").value = '';})"]},"metadata":{},"sourceType":"module"}